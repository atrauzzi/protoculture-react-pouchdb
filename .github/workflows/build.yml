name: Build
on: push

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1

      - name: Install Yarn
        run: npm install -g yarn

      - name: Yarn Install
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: Fetch tags for GitVersion
        run: git fetch --tags --unshallow

      - name: Fetch master for GitVersion
        if: github.ref != 'refs/heads/master'
        run: git branch --create-reflog master origin/master

      - name: GitVersion
        id: gitversion
        uses: roryprimrose/rungitversion@v1.0.0

      - name: Yarn Version
        run: yarn version --no-git-tag-version --new-version ${{ steps.gitversion.outputs.FullSemVer }}

      - name: Build
        run: yarn build

      - name: Prepare Artifact Directory
        run: mkdir artifacts

      - name: Package
        run: yarn pack --filename protoculture-react-pouchdb-${{ steps.gitversion.outputs.FullSemVer }}.tgz

      - name: Publish Package
        run: mv *.tgz artifacts/

      - name: Publish Version
        run: |
          echo ${{ steps.gitversion.outputs.FullSemVer }} >> artifacts/version
          echo protoculture-react-pouchdb-${{ steps.gitversion.outputs.FullSemVer }}.tgz >> artifacts/package

      - uses: actions/upload-artifact@v1
        with:
          name: build
          path: ./artifacts/

  release:

    needs: build

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/setup-node@v1

      - uses: actions/download-artifact@v1
        with:
          name: build

      - name: Set Version
        run: |
          echo "::set-env name=VERSION::`cat ./build/version`"
          echo "::set-env name=PACKAGE::`cat ./build/package`"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: ${{ env.PACKAGE }}
          asset_content_type: application/x-gzip
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/${{ env.PACKAGE }}

      - name: Prepare .npmrc
        run: echo ${{ env.NPM_RC }} > .npmrc

      - name: Publish Package to NPM
        run: npm publish ./build/${{ env.PACKAGE }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
